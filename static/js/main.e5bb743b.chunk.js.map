{"version":3,"sources":["Listitems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","onClick","deleteItem","App","state","currentItem","handleInput","bind","addItem","filteredItems","this","filter","setState","Date","now","preventDefault","newItem","console","log","newItems","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qRA8BeA,MA5Bf,SAAmBC,GACf,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GAEpB,OAAO,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACnC,2BACI,2BAAOC,KAAM,OAAOC,GAAMJ,EAAKE,IAC/BG,MAASL,EAAKM,KACdC,SACI,SAACC,GACGZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAOL,EAAKE,SAKjD,uBACAS,QAAU,kBAAMf,EAAMgB,WAAWZ,EAAKE,OADtC,gBASR,OACI,iCAAOL,EAAP,MCuDGgB,E,YA9Eb,WAAYjB,GAAQ,IAAD,8BACjB,4CAAMA,KACDkB,MAAQ,CACXhB,MAAO,GACPiB,YAAa,CACXT,KAAM,GACNJ,IAAK,KAIT,EAAKc,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKL,WAAa,EAAKA,WAAWK,KAAhB,gBAClB,EAAKR,UAAY,EAAKA,UAAUQ,KAAf,gBAbA,E,wEAePf,GACV,IAAMiB,EAAgBC,KAAKN,MAAMhB,MAAMuB,QAAO,SAAArB,GAAI,OAChDA,EAAKE,MAAMA,KACXkB,KAAKE,SAAS,CACZxB,MAAMqB,M,kCAGAX,GACVY,KAAKE,SAAS,CACZP,YAAY,CACVT,KAAME,EAAEE,OAAOL,MACfH,IAAKqB,KAAKC,W,8BAIRhB,GACNA,EAAEiB,iBACF,IAAMC,EAAUN,KAAKN,MAAMC,YAG3B,GADAY,QAAQC,IAAIF,GACM,KAAfA,EAAQpB,KAAU,CAEnB,IAAMuB,EAAQ,sBAAMT,KAAKN,MAAMhB,OAAjB,CAAwB4B,IACtCN,KAAKE,SAAS,CACZxB,MAAO+B,EACPd,YAAa,CACXT,KAAM,GACNJ,IAAK,S,gCAKFI,EAAMJ,GACf,IAAMJ,EAAQsB,KAAKN,MAAMhB,MAEzBA,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAMA,IACZF,EAAKM,KAAKA,MAGdc,KAAKE,SAAU,CACbxB,MAAOA,M,+BAIT,OACE,yBAAKG,UAAU,OACf,0BAAMG,GAAI,aAAa0B,SAAUV,KAAKF,SACpC,2BAAOf,KAAK,OAAO4B,YAAY,aAC/B1B,MAAOe,KAAKN,MAAMC,YAAYT,KAC9BC,SAAUa,KAAKJ,cACf,4BAAQb,KAAM,UAAd,UAEF,kBAAC,EAAD,CAAWL,MAASsB,KAAKN,MAAMhB,MAC/BW,UAAaW,KAAKX,UAClBG,WAAcQ,KAAKR,kB,GAvEPoB,IAAMC,WCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e5bb743b.chunk.js","sourcesContent":["import React from 'react';\n\nfunction ListItems(props) {\n    const items = props.items;\n    const listItems = items.map(item =>\n        {\n            return <div className=\"list\" key={item.key}>\n                <p>\n                    <input type =\"text\" id = {item.key}\n                    value = {item.text}\n                    onChange = {\n                        (e) => {\n                            props.setUpdate(e.target.value, item.key)\n                        }\n                    }\n                    />\n                </p>\n                <p \n                onClick= {() => props.deleteItem(item.key)\n                }\n                \n                > remove </p>\n                \n                 </div>\n        })\n        \n        return (\n            <div> {listItems} </div>\n        )\n}\nexport default ListItems;","import React from 'react';\nimport './App.css';\nimport ListItems from './Listitems';\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [], \n      currentItem: {\n        text: \"\", \n        key: \"\"\n      }\n    }\n    \n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n}\n  deleteItem (key) {\n    const filteredItems = this.state.items.filter(item => \n      item.key!==key);\n      this.setState({\n        items:filteredItems\n      })\n  };\n  handleInput(e) {\n    this.setState({\n      currentItem:{\n        text: e.target.value,\n        key: Date.now()\n      }\n    })\n  }\n  addItem(e){\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    \n    console.log(newItem);\n    if(newItem.text!==\"\"){\n      \n      const newItems =[...this.state.items, newItem];\n      this.setState({\n        items: newItems, \n        currentItem: {\n          text: '', \n          key: ''\n        }\n      })\n    }\n  }\n  setUpdate (text, key) {\n    const items = this.state.items;\n    // eslint-disable-next-line\n    items.map(item  => {\n      if(item.key===key) {\n        item.text=text;\n      }\n    })\n    this.setState ({\n      items: items\n    })\n  }\n  render() {\n    return (\n      <div className=\"App\">\n      <form id= \"to-do-form\" onSubmit={this.addItem}>\n        <input type=\"text\" placeholder=\"Enter text\"\n        value={this.state.currentItem.text}\n        onChange={this.handleInput}/>\n        <button type =\"submit\"> Add </button>\n      </form>\n      <ListItems items = {this.state.items}\n      setUpdate = {this.setUpdate} \n      deleteItem = {this.deleteItem}>\n      </ListItems>\n      \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}